/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 17.04.2024 03:12:39

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1584;
#else
constexpr int kTensorArenaSize = 560;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,4 } };
const TfArray<1, float> quant0_scale = { 1, { 4.0117645263671875, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[5] = { 460, -477, -38, -187, -312, };
const TfArray<1, int> tensor_dimension1 = { 1, { 5 } };
const TfArray<1, float> quant1_scale = { 1, { 0.0024640073534101248, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const ALIGN(16) int8_t tensor_data2[5*10] = { 
  -15, 52, -116, 27, 29, -80, -35, -96, 67, 52, 
  -103, -80, 15, -80, -66, -37, 86, 10, -17, 16, 
  -76, -33, -71, -30, 28, -52, 112, -82, 21, -64, 
  -29, 44, 42, -72, 42, -54, -47, 70, -44, -68, 
  80, -55, 26, -91, 127, 38, -12, -61, -23, -17, 
};
const TfArray<2, int> tensor_dimension2 = { 2, { 5,10 } };
const TfArray<1, float> quant2_scale = { 1, { 0.0064441743306815624, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[10] = { -162, 232, -259, 372, -298, -132, -18, -249, 355, 33, };
const TfArray<1, int> tensor_dimension3 = { 1, { 10 } };
const TfArray<1, float> quant3_scale = { 1, { 0.0034399554133415222, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[10*20] = { 
  -22, 56, 47, -56, 51, 27, -26, -95, -63, -64, 59, -31, -10, -10, 41, 64, -96, 63, -38, -66, 
  -36, 56, -2, 23, 7, 16, -27, 55, -38, -16, 54, -58, 35, 36, 13, -13, 73, 31, 43, -43, 
  -33, 20, 10, -60, -1, -34, 81, -51, -27, 39, -14, 52, 84, 19, -19, -5, 17, 25, -59, 41, 
  -61, -17, 13, 13, 2, 44, -18, 61, 45, 25, -2, 69, -93, 12, -47, 37, 127, -5, -8, 3, 
  -34, -56, 66, -11, 46, 50, -5, -45, 24, -41, 30, -29, 51, -11, -9, -43, -93, -51, -3, -18, 
  -59, -23, -81, 2, 13, -31, -55, -54, -1, 41, 51, -56, -33, 44, 17, -25, -35, 64, 9, -47, 
  -20, 89, 38, 25, 53, -45, 28, 59, 51, 26, -55, -53, -86, 63, 60, -52, -56, -31, 36, 25, 
  -59, -64, 20, 54, -3, -22, 44, -23, -29, -63, 54, 4, 68, -21, 52, 41, 20, -1, 54, -51, 
  -58, -33, 40, -9, -21, -57, -9, 13, -35, 47, 62, -1, -38, -25, -4, -13, 34, 15, -5, -3, 
  -37, -56, -46, 24, 26, -9, 8, 4, 13, -48, -65, -8, -1, -55, -74, -4, 20, 19, 25, 10, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 10,20 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0067440681159496307, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int32_t tensor_data5[20] = { -3, 9, -102, -5, -10, -18, -16, 65, -4, 0, 0, -4, -28, 0, -47, 8, 31, -79, -10, -4, };
const TfArray<1, int> tensor_dimension5 = { 1, { 20 } };
const TfArray<1, float> quant5_scale = { 1, { 0.0067187203094363213, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[20*30] = { 
  24, -33, 19, -34, 11, 16, -25, -16, 4, 0, 9, 19, -7, -31, 34, -25, -32, -11, 31, -32, -7, -6, 32, 5, 37, 4, -31, 36, -8, -20, 
  22, -32, 30, 23, -29, -4, 10, -20, -26, 19, 39, -25, -23, -1, 14, -28, 3, -36, -12, -28, -8, 34, 14, 39, 3, -5, -26, -20, -6, -13, 
  -33, -38, 15, 47, 30, -38, 2, 18, 3, 3, 4, -34, -25, 27, 43, -16, 5, -5, 26, -38, -4, 36, 13, 2, 20, -26, 35, -25, -127, -18, 
  5, -18, -7, 21, 21, -23, -29, -30, -16, 13, -21, 4, -38, -1, -9, 40, -24, 29, -23, -34, -16, 20, 31, -21, -25, -3, 19, -32, 37, -15, 
  23, -41, -2, -17, -39, 33, -15, 2, -29, 31, -32, -34, 4, -30, -17, -32, -3, 39, 22, 29, 20, -33, 34, 26, 25, 5, -40, 36, -36, 17, 
  -7, 2, 8, 17, -12, -18, -36, -2, 10, -40, 21, 26, 0, 36, -33, 25, -21, -35, -31, -31, -16, -9, -24, -7, 12, -34, 3, -20, -40, 22, 
  34, 38, 19, 22, 13, -35, 20, -8, -10, -8, 14, 36, 31, 0, 3, -11, -19, 29, 17, 14, -45, 4, 7, 3, -35, 24, -8, -20, 43, -15, 
  -7, 26, 14, 6, -17, 29, -35, 10, 14, -17, 38, 2, -8, 35, 14, -62, 42, -40, -31, -18, -14, 22, -7, -8, -10, 2, 19, 31, -46, -8, 
  40, -9, -18, 15, -47, 21, -2, -13, 8, -31, 12, -26, 39, 0, -8, -7, -13, 14, 7, 23, 28, -4, 10, 40, 14, 14, -29, 23, 1, 20, 
  -31, 10, 24, 7, 7, 34, 13, -39, -12, -27, -30, 12, -1, 38, -29, 23, -21, 21, -29, 5, -29, -28, -2, -38, 40, -37, 26, -1, 10, 41, 
  -26, 21, 4, -16, 16, 3, -21, -32, 10, 5, 4, 29, -11, -8, -25, -21, -13, -23, -39, -30, -27, 5, 37, -34, 10, -9, 21, -12, 23, 40, 
  0, -11, -40, -32, 20, -40, 32, -18, -39, 3, 34, 10, -33, -19, -15, 1, -21, 6, -29, -20, -37, -15, 1, -37, 8, -38, -10, 33, -18, 6, 
  -14, 41, 36, -39, 1, -46, 29, -4, -5, 14, -43, 23, 36, -35, 4, 7, 12, 13, -27, 5, -28, -8, 37, -4, -5, -5, -21, 3, 52, -27, 
  -38, -15, -7, 11, -40, 18, -28, -35, 35, 25, -29, 29, 22, -8, -11, -9, 11, 36, 11, 35, 1, -28, -21, 0, 22, 10, -31, 5, -20, 26, 
  -34, 18, 6, -14, -33, -39, 23, -14, 31, 27, 14, 23, -31, 18, 29, 46, 25, -30, -36, -1, 31, -12, -20, 28, -20, 24, 32, -23, 10, 7, 
  18, -33, -23, -34, 16, -27, -17, 3, -33, 13, 0, -32, -13, -9, 31, -14, 27, 22, 1, -16, -36, 31, -37, -12, 14, 4, 6, 26, 28, -12, 
  3, 18, 2, -6, 4, 29, -28, 2, 28, 23, -35, -30, 19, 9, -1, -51, 19, 38, 2, 40, -35, 12, -8, -16, -14, 24, 27, 14, -22, 33, 
  -31, 2, 11, 35, 30, 32, 12, 8, -41, 31, -16, 31, -39, -14, 18, -20, -25, 14, -14, -27, -3, -28, -12, -17, 17, 21, 24, -21, -30, 35, 
  29, -23, 16, 3, -32, 5, 30, 8, -14, -13, -55, -37, 24, 4, 28, 7, -46, 16, 35, 23, -4, -27, -20, 37, 5, -16, 23, 1, 52, 33, 
  12, -40, 34, 31, -7, 23, -18, -36, 21, 9, 10, -37, -6, 30, 14, -43, 32, 6, -20, -39, 6, 40, -35, -20, 33, 3, 0, 13, 39, 32, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 20,30 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0084696803241968155, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[30] = { 0, -1, 0, -12, -49, -1, -1, -6, 0, 0, 0, 0, 0, 0, -32, -25, 30, 0, 0, 0, -18, 0, 0, 0, 0, 0, -2, 0, -1, -3, };
const TfArray<1, int> tensor_dimension7 = { 1, { 30 } };
const TfArray<1, float> quant7_scale = { 1, { 0.013972382992506027, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[30*60] = { 
  13, 4, 36, -16, 20, -26, -22, -30, -35, 29, 23, -25, -10, -22, -8, -30, -1, -25, 0, -14, 24, 8, -12, 6, 31, -30, -8, -13, 20, -20, -13, 35, -33, -28, -32, 0, 8, -20, 34, -22, -17, 35, 26, 13, -34, -30, 25, -5, -21, -5, -35, 13, -4, 24, 29, 17, 27, -19, 17, -2, 
  -23, 21, -18, 6, 19, 27, -14, -20, 32, -21, 32, -32, -13, 2, -2, 0, 33, 16, 5, 7, 0, 17, 27, 18, 29, -20, -8, 18, 4, -12, 5, -15, 18, -28, 2, -37, -3, 7, -18, 26, -6, 2, -23, -20, -18, -35, 36, -26, 35, 22, 15, -4, 1, -7, -6, 28, 31, -11, 35, -2, 
  -8, 33, -12, -4, -7, -22, -32, 21, 35, 18, 4, 16, -11, 10, 33, 19, 33, -17, 28, -9, -31, 13, 34, 12, 6, -26, -1, -19, 20, 19, 35, -23, 30, -14, -3, -7, -6, -25, -17, -16, -21, -27, -24, -24, -35, -35, -30, 29, 30, 22, -22, 32, 4, -26, 24, 3, -29, -34, 33, -14, 
  3, 0, -7, 23, -24, -10, 33, 23, 4, 6, 26, 75, -27, -7, -8, 18, -27, 3, -26, -33, -20, -21, -1, 29, -14, 11, 4, -40, 24, -21, -18, -20, -23, 7, -10, 30, 31, 23, 15, 21, -36, -26, 54, -27, -30, 4, 28, -5, 20, 6, -3, 27, -16, -24, 19, 14, -13, 24, -15, -19, 
  -51, -15, -10, 19, -8, -32, 23, -4, -5, 16, 12, -6, -19, 1, 37, -32, 33, -6, 10, 12, -24, 31, -38, -23, -4, -45, 11, -2, -2, 26, 32, -10, -6, 18, 28, 26, -2, -18, -25, -31, -31, 27, 15, 19, -9, -11, 34, -34, 34, 27, 1, 23, -25, -27, -11, -6, 21, 25, -34, -23, 
  -29, 14, -5, -15, -19, -22, -21, 25, -14, 1, -38, -38, -25, 33, -27, 26, -16, -4, 28, -8, 37, -30, 11, -1, 17, 27, -15, -20, -26, -25, 5, 8, 8, -10, -31, 6, -12, -1, -10, -5, -31, -31, 21, 28, 18, -2, -15, 13, -28, -34, -26, 31, 17, 34, 17, 18, 14, -1, 6, 29, 
  25, -27, -1, 1, -27, -6, -5, -14, 17, 24, -25, -17, 1, -34, -10, -4, -24, -7, -5, -34, 1, -11, 29, 0, 6, 0, 17, -9, -12, -15, -36, 32, 23, -21, 1, 15, -17, -34, -35, -25, -34, 23, 10, -35, -31, 9, 9, 0, 32, -15, 26, -37, 25, -8, 8, 19, -1, 26, 7, 29, 
  -38, 24, 36, -9, 18, 25, 4, 11, -10, 36, -8, 11, 8, -7, 6, -23, 22, -31, -33, -7, 32, 27, -40, 0, -26, -22, 28, -43, -25, -36, 7, 36, 32, 2, -24, 26, -20, -5, 17, 0, -33, 19, 36, -2, -1, -13, -18, -17, 26, -35, 14, 32, -33, -27, -18, 29, -33, -14, 24, 34, 
  20, 13, -34, 4, -2, 30, -15, -31, 34, -34, -17, 3, 6, 33, -10, 8, 23, 36, -2, 27, 32, 7, 10, -1, 21, 36, -15, 10, 21, -14, -16, 31, 21, -14, -9, -3, 0, 17, -9, 0, -19, -30, 9, 35, 0, -8, 26, -32, 1, 14, -34, -27, -31, -31, -33, 37, -33, 30, 1, 7, 
  14, -1, -6, -29, -24, -6, 1, -36, 13, 1, 16, -9, 0, 17, 1, 23, -5, -11, 5, -23, 13, 27, -36, -3, 20, 33, 8, -28, 29, 30, 7, 12, -26, -28, 13, 32, 7, 1, 18, -20, -37, 17, 3, -33, 5, 26, 16, -17, -17, -22, -16, 5, 30, 19, -13, 31, -33, 34, 5, -34, 
  14, 23, -35, 7, 31, -4, 8, 17, 10, -18, 18, 64, 0, 17, -15, 10, 25, -4, -32, -42, -23, -8, 45, -8, 9, 48, -7, 13, 22, 7, -19, -56, 11, -19, -37, -35, -35, 38, 15, 5, -9, 3, 18, 32, -11, 12, -35, 5, 27, 8, -19, -26, -26, 18, 7, 25, 1, -26, -10, -40, 
  -36, 17, -31, -17, 7, -16, -10, -30, 13, -22, -6, 5, 17, 15, 14, 25, 14, -11, 11, 23, 1, 27, -5, -33, -14, -24, -30, 17, -13, -24, 7, 12, -14, -33, -12, -18, 19, -33, 26, 19, 2, -3, 13, -20, -19, 35, 28, -15, 2, 9, 14, 4, 23, 35, -18, 27, 4, -28, -10, -12, 
  -31, -15, 7, 10, -27, 27, -26, -2, -12, -2, 20, 7, 7, 26, 27, -34, 5, 30, 0, 15, -32, -7, 34, -26, -19, -12, -31, -28, -19, -16, 16, -8, 2, -33, 28, 29, 35, -27, 14, 30, -7, 32, -28, -17, -22, -26, 31, -19, -3, -32, -20, -34, -18, 12, 21, -29, -16, -15, 9, 21, 
  4, -21, -14, 32, -30, -8, 27, -22, -28, -4, 32, 12, 23, -23, -10, 5, 4, -16, 30, -17, 26, -29, -13, -27, -4, -36, 35, 10, 28, -15, -17, 31, 26, -37, 4, 11, -10, 13, -9, -7, 23, 28, 0, -5, 33, 26, -23, -34, -9, 12, 25, 35, 30, 17, 28, 13, 24, -17, 4, -35, 
  3, -41, 11, 29, 9, -33, 18, 19, -3, 19, 13, 20, -27, -17, -6, -8, 3, 24, 24, -2, 10, -12, 33, 27, 9, 53, -13, -34, 15, -36, 33, -32, 35, -3, -38, -31, -20, -36, 29, -36, -22, 4, -50, 0, 29, -21, 1, -17, 25, -34, 21, 8, 32, -48, 18, -6, -37, -6, 34, 22, 
  5, -15, 18, 25, 19, -20, 1, 23, 45, 6, 20, -15, 11, 29, 5, -31, -6, -13, -34, 7, 22, 16, 38, -8, 18, 30, -34, -5, -19, -6, -13, -21, 6, -26, -15, -22, -24, -21, -4, 16, -17, 16, -56, -18, -20, 4, 36, 0, 36, 5, 24, 21, -18, -1, -1, -36, 11, 1, 22, -30, 
  51, 28, -14, 20, -15, 19, -11, -2, -19, -36, 6, 24, -6, -9, 5, 11, -36, 29, -12, -10, -18, 11, -2, 24, 11, 19, -32, 13, 22, -27, 0, 38, 6, -2, 36, -26, 2, -7, -32, -7, -14, -10, 27, 30, 20, -2, 12, -11, -16, 20, -1, 21, -9, 30, -33, 26, -9, -38, -4, 34, 
  29, -4, -35, -19, -9, 27, 27, -20, 30, -28, -2, -33, 31, 32, -7, -25, -15, -7, -35, -21, -19, -30, -6, -15, -33, -14, 19, 32, 2, 29, 9, -12, 18, -16, -22, -23, 27, 26, 4, 19, -34, 17, 1, -14, -6, 30, 27, -20, -9, -2, 29, -27, 12, -18, 12, 21, -1, 35, 18, 27, 
  13, 28, -8, 30, -33, -28, -10, 10, -27, 8, 36, -34, 34, -37, -14, 23, 27, -3, 14, 10, 31, -31, 27, 35, -8, -32, 21, -31, -29, -10, -4, 10, 10, -28, 1, 23, -12, 25, 16, 17, -34, 14, -37, -20, -14, 29, -24, -20, 17, -19, 9, -33, 31, -13, -10, -1, 23, -22, 16, -13, 
  -23, 25, 3, -19, -17, -6, 24, -31, -24, 11, -24, -29, -11, 35, -35, -6, -6, 31, 24, -31, -17, -17, -3, -36, 28, -25, -6, 25, -7, 5, -18, 19, -29, -10, 35, -14, -30, -19, 29, -13, 33, -13, 14, 33, 11, -31, -31, 23, 31, -4, 26, -23, 0, 17, -5, -33, 1, -26, -19, 35, 
  -1, -9, 3, 6, 11, -18, 29, 1, 30, 17, -32, 31, 19, 10, -11, 13, -20, 35, 0, 11, 1, 12, 12, -2, 26, 90, -21, -22, -1, 2, -20, -66, -12, 17, -3, 5, 21, 24, -7, -22, 21, 12, 22, -6, 26, 12, -10, -39, -5, -33, -37, 5, 26, 19, 13, 1, 21, -13, 15, 17, 
  16, -16, -34, -17, 17, 10, 1, 12, -27, -14, -24, -6, 22, 27, -33, -16, -32, -5, 13, -31, 22, 1, 20, -12, 8, 11, 29, -33, 4, -14, -10, 21, -31, 22, -24, 34, -1, 16, 5, -14, 23, -37, -18, -28, -11, -18, 33, 23, -8, 34, 9, -40, 2, -40, 7, -20, -9, 10, 9, -4, 
  -1, -19, -13, 16, -4, -31, -16, -37, -12, 24, -11, 22, -30, -24, 29, -37, -14, 36, -18, -2, 35, 1, -32, 10, 30, -18, -8, -13, 35, -1, 19, -16, 12, 32, -24, 1, -5, -6, -3, 1, -10, 13, -32, -25, -5, 6, -35, 22, -1, 0, -26, 4, 15, -25, 18, -21, 31, 11, -35, 33, 
  30, 24, -9, 15, -1, -17, 35, -11, 5, 18, 17, -1, 15, 3, -29, 30, 21, 9, -17, 15, 5, -20, -13, -9, -24, 9, 29, 35, -36, -22, 0, 1, 5, -18, -7, 10, -32, -10, 22, 34, 19, -8, 30, -10, 32, 13, -27, -34, -36, -36, -16, -33, 17, 11, -18, 3, 0, 30, -13, 8, 
  -31, 22, -29, 18, 8, 32, -32, -25, -8, -23, -30, 28, 1, -16, -11, 17, -16, -6, -5, -5, -30, -25, 22, 12, 35, 26, -16, -32, 29, -29, -20, -6, -25, 36, 31, 1, -12, -4, 22, -13, -6, -36, -34, -27, 17, 18, -31, -1, 22, 27, -2, 35, -19, -37, -7, 25, 23, 20, 29, -36, 
  -22, -37, -37, 19, -8, 20, -36, -2, -3, -23, 2, 22, 6, -16, -31, -27, 27, 22, 17, 14, -32, 25, 21, -34, 14, -21, -29, 26, 2, 37, 9, 7, 6, 11, 12, -32, -18, -22, 23, 20, -24, -26, -30, 30, -16, 0, -12, 20, -26, 5, -34, 2, -30, 1, 21, 4, 0, 0, 12, 36, 
  -20, 21, -12, 13, -1, -9, -4, -35, -23, 26, -10, -14, 32, 34, -19, 19, 25, 21, -35, 33, -29, 28, -20, 3, -25, -2, 16, -11, -34, 27, -24, 13, 32, 16, -13, -13, -34, 1, -13, -15, 21, -2, -29, 26, 0, 12, -15, 19, -10, -25, -13, -25, 0, 19, 14, -24, -31, -9, -25, -15, 
  15, 27, 36, 36, -32, 2, 4, -19, -10, -15, 32, -24, 28, 20, -22, -20, -34, -25, 29, 20, 33, 8, 30, 18, 14, -29, 5, -33, 14, -16, 1, -3, -1, 26, 0, 27, -13, -36, -19, -20, 31, -26, 14, -16, -26, 16, 1, -28, 5, -3, -30, -19, -20, -3, -16, 18, 26, 16, 6, 9, 
  8, 3, -30, 7, -15, 8, 7, 22, 42, -15, -6, -127, -28, -17, 32, 33, 11, -33, 0, 18, 11, -33, 4, -3, 5, -14, -13, -29, 6, -25, -1, -25, -1, -17, 14, 32, -10, -24, -16, -27, -14, 34, -70, -35, 37, -10, 14, 20, 5, 6, 10, -32, -24, 12, 34, 2, -36, 14, -8, -11, 
  -9, 27, 20, 15, 13, 23, 35, -1, -23, -28, -14, 30, -11, 17, -40, 34, -1, 4, -29, 26, 27, 10, -34, 16, 13, -17, -21, -1, -9, -34, 0, 29, -12, -20, 9, 0, 17, 11, 22, 2, -28, 4, -24, -7, -11, -3, 19, 2, -21, 21, -41, 3, 29, 9, 30, 0, -32, -7, 30, 2, 
};
const TfArray<2, int> tensor_dimension8 = { 2, { 30,60 } };
const TfArray<1, float> quant8_scale = { 1, { 0.0069850105792284012, } };
const TfArray<1, int> quant8_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[60] = { 8, 40, -24, 0, -30, 34, 0, -36, -5, 0, -39, 0, 0, 0, -19, 0, 0, 0, 0, -17, 0, 0, -2, 20, 0, 9, -4, 30, 0, 0, 0, 39, 0, -7, 23, 0, 0, 10, 0, 0, 43, -26, 7, 19, 0, 0, 0, 30, -54, 0, -13, -39, 0, 43, 0, 12, 0, -40, -1, 35, };
const TfArray<1, int> tensor_dimension9 = { 1, { 60 } };
const TfArray<1, float> quant9_scale = { 1, { 0.012748842127621174, } };
const TfArray<1, int> quant9_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[60*4] = { 
  0, 77, 21, -88, 
  -127, -12, 10, 69, 
  56, -79, 47, -17, 
  -79, 56, -9, -80, 
  64, -76, 59, 28, 
  -41, -11, 3, 17, 
  46, -52, -31, 8, 
  57, 66, -1, 51, 
  70, -1, -14, -14, 
  -80, -6, -87, -96, 
  78, -108, 29, 16, 
  -36, -54, 92, -34, 
  -44, -31, -57, 46, 
  23, -5, -81, 23, 
  82, 15, -63, 26, 
  0, -90, -12, 32, 
  1, -7, -32, -84, 
  -18, 67, -37, -12, 
  -81, -93, -62, -34, 
  -1, -46, 11, 55, 
  -13, 27, -61, -3, 
  -6, -28, 28, -61, 
  -8, 47, 69, -84, 
  14, -43, 71, 53, 
  19, -76, -23, -28, 
  81, -27, 96, -102, 
  -30, -67, 55, 4, 
  -107, 76, 38, -16, 
  91, -82, -56, 6, 
  43, -56, -1, -82, 
  22, -75, 15, -72, 
  16, -83, -41, 88, 
  -91, 58, -93, -22, 
  -124, 54, 78, 3, 
  -100, -5, 13, 87, 
  81, -89, 16, -6, 
  -61, 77, -69, -84, 
  24, 47, 76, -50, 
  -24, 46, -9, -88, 
  72, -16, -13, -77, 
  -35, 37, 30, 24, 
  81, 17, 24, 29, 
  -105, -71, 93, 11, 
  -84, 25, 33, 60, 
  15, -71, -45, 17, 
  17, -76, -37, -34, 
  -34, -93, -34, -7, 
  20, 29, -44, 90, 
  49, 45, -28, 39, 
  -81, 57, -52, -66, 
  46, -35, -19, 29, 
  53, -124, 50, 61, 
  1, -82, -77, -89, 
  -72, 85, -25, 8, 
  -52, -57, 45, -95, 
  -96, 0, 24, 20, 
  -38, -23, 35, -30, 
  84, -38, 19, 86, 
  48, 5, -6, -40, 
  -26, -59, 54, 60, 
};
const TfArray<2, int> tensor_dimension10 = { 2, { 60,4 } };
const TfArray<1, float> quant10_scale = { 1, { 0.0031778640113770962, } };
const TfArray<1, int> quant10_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<2, int> tensor_dimension11 = { 2, { 1,60 } };
const TfArray<1, float> quant11_scale = { 1, { 2.000338077545166, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<2, int> tensor_dimension12 = { 2, { 1,30 } };
const TfArray<1, float> quant12_scale = { 1, { 0.79326730966567993, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<2, int> tensor_dimension13 = { 2, { 1,20 } };
const TfArray<1, float> quant13_scale = { 1, { 0.5100712776184082, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<2, int> tensor_dimension14 = { 2, { 1,10 } };
const TfArray<1, float> quant14_scale = { 1, { 0.3823620080947876, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<2, int> tensor_dimension15 = { 2, { 1,5 } };
const TfArray<1, float> quant15_scale = { 1, { 0.45004549622535706, } };
const TfArray<1, int> quant15_zero = { 1, { 31 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<2, int> tensor_dimension16 = { 2, { 1,5 } };
const TfArray<1, float> quant16_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,10,9 } };
const TfArray<1, int> outputs0 = { 1, { 11 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 11,8,7 } };
const TfArray<1, int> outputs1 = { 1, { 12 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 12,6,5 } };
const TfArray<1, int> outputs2 = { 1, { 13 } };
const TfLiteFullyConnectedParams opdata3 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs3 = { 3, { 13,4,3 } };
const TfArray<1, int> outputs3 = { 1, { 14 } };
const TfLiteFullyConnectedParams opdata4 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs4 = { 3, { 14,2,1 } };
const TfArray<1, int> outputs4 = { 1, { 15 } };
const TfLiteSoftmaxParams opdata5 = { 1 };
const TfArray<1, int> inputs5 = { 1, { 15 } };
const TfArray<1, int> outputs5 = { 1, { 16 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 64), (TfLiteIntArray*)&g0::tensor_dimension0, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant1))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 50, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 80, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 120, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 1800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 240, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 240, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension11, 60, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 64), (TfLiteIntArray*)&g0::tensor_dimension12, 30, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension13, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 32), (TfLiteIntArray*)&g0::tensor_dimension14, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16), (TfLiteIntArray*)&g0::tensor_dimension15, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension16, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[6] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[6] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 17, };
const size_t tflNodes_subgraph_index[] = {0, 6, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  16, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_6_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 17;
  for (size_t i = 0; i < 17; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_invoke() {
  for (size_t i = 0; i < 6; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
